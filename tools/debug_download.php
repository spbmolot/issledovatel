<?php

require_once 'vendor/autoload.php';
require_once 'config/database.php';

use ResearcherAI\YandexDiskClient;
use ResearcherAI\Logger;

echo "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í –° –Ø–ù–î–ï–ö–°.–î–ò–°–ö–ê\n";
echo "============================================\n\n";

// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n";
try {
    $stmt = $pdo->prepare("SELECT yandex_token, yandex_folder FROM researcher_settings WHERE id = 1");
    $stmt->execute();
    $settings = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$settings || empty($settings['yandex_token'])) {
        throw new Exception("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ç–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π");
    }
    
    $yandexToken = $settings['yandex_token'];
    $yandexFolder = $settings['yandex_folder'];
    
    echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –±–∞–∑—ã:\n";
    echo "   - –¢–æ–∫–µ–Ω: [" . strlen($yandexToken) . " —Å–∏–º–≤–æ–ª–æ–≤]\n";
    echo "   - –ü–∞–ø–∫–∞: {$yandexFolder}\n\n";
    
} catch (Exception $e) {
    echo "‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: " . $e->getMessage() . "\n";
    exit(1);
}

try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    $yandexDiskClient = new YandexDiskClient($yandexToken);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    echo "üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º...\n";
    if (!$yandexDiskClient->testConnection()) {
        die("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É!\n");
    }
    echo "‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n";
    
    // –ò—â–µ–º —Ñ–∞–π–ª—ã
    echo "üìÅ –ò—â–µ–º Excel —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ: {$yandexFolder}\n";
    $files = $yandexDiskClient->searchFilesByExtension($yandexFolder, '.xlsx');
    echo "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: " . count($files) . "\n\n";
    
    if (empty($files)) {
        die("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n");
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
    $testFile = $files[0];
    echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {$testFile['name']}\n";
    echo "   - –ü—É—Ç—å: {$testFile['path']}\n";
    echo "   - –†–∞–∑–º–µ—Ä: " . (isset($testFile['size']) ? $testFile['size'] : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') . "\n\n";
    
    // –ü–æ–ª—É—á–∞–µ–º download URL
    echo "üîó –ü–æ–ª—É—á–∞–µ–º download URL...\n";
    $downloadUrl = $yandexDiskClient->getDownloadUrl($testFile['path']);
    
    if (!$downloadUrl) {
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å download URL\n";
        echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π\n";
        die();
    }
    
    echo "‚úÖ Download URL –ø–æ–ª—É—á–µ–Ω\n";
    echo "   URL: " . substr($downloadUrl, 0, 80) . "...\n\n";
    
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
    echo "‚¨áÔ∏è –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª...\n";
    $tempPath = "/tmp/" . $testFile['name'];
    echo "   –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {$tempPath}\n";
    
    $result = $yandexDiskClient->downloadFile($downloadUrl, $tempPath);
    
    if ($result) {
        echo "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n";
        echo "   –†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: " . filesize($tempPath) . " –±–∞–π—Ç\n";
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if (file_exists($tempPath)) {
            unlink($tempPath);
            echo "   –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω\n";
        }
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞\n";
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        echo "\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–®–ò–ë–ö–ò:\n";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL –Ω–∞–ø—Ä—è–º—É—é
        echo "üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º download URL –Ω–∞–ø—Ä—è–º—É—é...\n";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $downloadUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_HEADER, true);
        curl_setopt($ch, CURLOPT_NOBODY, true); // –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        
        $headers = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $error = curl_error($ch);
        curl_close($ch);
        
        echo "   HTTP –∫–æ–¥: {$httpCode}\n";
        if ($error) {
            echo "   CURL –æ—à–∏–±–∫–∞: {$error}\n";
        }
        
        if ($httpCode === 200) {
            echo "   ‚úÖ URL –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n";
        } else {
            echo "   ‚ùå URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞: {$httpCode}\n";
            echo "   –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:\n";
            echo "   " . str_replace("\n", "\n   ", trim($headers)) . "\n";
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏ –≤ /tmp
        echo "\nüìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏...\n";
        if (is_writable('/tmp')) {
            echo "   ‚úÖ –ü–∞–ø–∫–∞ /tmp –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏\n";
        } else {
            echo "   ‚ùå –ü–∞–ø–∫–∞ /tmp –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏\n";
        }
        
        // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        $testWrite = file_put_contents('/tmp/test_write.txt', 'test');
        if ($testWrite) {
            echo "   ‚úÖ –ú–æ–∂–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ /tmp\n";
            unlink('/tmp/test_write.txt');
        } else {
            echo "   ‚ùå –ù–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ /tmp\n";
        }
    }
    
} catch (Exception $e) {
    echo "‚ùå –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê: " . $e->getMessage() . "\n";
}

// –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
echo "\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò –°–ò–°–¢–ï–ú–´:\n";
if (file_exists('logs/app.log')) {
    $logs = file_get_contents('logs/app.log');
    $logLines = explode("\n", $logs);
    $recentLogs = array_slice($logLines, -10); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
    
    foreach ($recentLogs as $line) {
        if (!empty(trim($line))) {
            echo "   " . $line . "\n";
        }
    }
} else {
    echo "   ‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω (logs/app.log)\n";
}

echo "\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n";
