<?php
/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API —Ñ—É–Ω–∫—Ü–∏–π –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è AI
 */

// –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
header('Cache-Control: no-cache, no-store, must-revalidate');
header('Pragma: no-cache');
header('Expires: 0');
header('Content-Type: text/html; charset=UTF-8');

?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            padding: 20px;
        }
        
        .test-card {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        .status-success { color: #28a745; }
        .status-warning { color: #ffc107; }
        .status-error { color: #dc3545; }
        
        .log-area {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 1rem;
            height: 300px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
        }
        
        .test-btn {
            margin: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="test-card">
                    <h1 class="text-center mb-4">üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è</h1>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <h5><i class="fas fa-heartbeat"></i> –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h5>
                            
                            <div class="mb-3">
                                <div class="d-flex align-items-center mb-2">
                                    <i id="status-openai" class="fas fa-circle me-2 status-error"></i>
                                    <span class="fw-bold">OpenAI:</span>
                                    <span id="text-openai" class="ms-2">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span>
                                </div>
                                
                                <div class="d-flex align-items-center mb-2">
                                    <i id="status-deepseek" class="fas fa-circle me-2 status-error"></i>
                                    <span class="fw-bold">DeepSeek:</span>
                                    <span id="text-deepseek" class="ms-2">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span>
                                </div>
                                
                                <div class="d-flex align-items-center mb-2">
                                    <i id="status-yandex" class="fas fa-circle me-2 status-error"></i>
                                    <span class="fw-bold">–Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:</span>
                                    <span id="text-yandex" class="ms-2">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <button class="btn btn-primary test-btn" onclick="testApiStatus()">
                                    <i class="fas fa-sync"></i> –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã
                                </button>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <h5><i class="fas fa-search"></i> –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞</h5>
                            
                            <div class="mb-3">
                                <input type="text" class="form-control" id="test-query" 
                                       value="–Ω–∞–π–¥–∏ —Ü–µ–Ω—ã –Ω–∞ –ª–∞–º–∏–Ω–∞—Ç" 
                                       placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è">
                            </div>
                            
                            <div class="mb-3">
                                <button class="btn btn-success test-btn" onclick="testQuery()">
                                    <i class="fas fa-paper-plane"></i> –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
                                </button>
                                
                                <button class="btn btn-warning test-btn" onclick="clearLog()">
                                    <i class="fas fa-eraser"></i> –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <div class="row">
                        <div class="col-12">
                            <h5><i class="fas fa-terminal"></i> –õ–æ–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h5>
                            <div id="log-area" class="log-area">
                                <div class="text-muted">–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é...</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        function log(message, type = 'info') {
            const logArea = document.getElementById('log-area');
            const time = new Date().toLocaleTimeString();
            
            let icon = 'üìù';
            let colorClass = '';
            
            switch(type) {
                case 'success': icon = '‚úÖ'; colorClass = 'text-success'; break;
                case 'error': icon = '‚ùå'; colorClass = 'text-danger'; break;
                case 'warning': icon = '‚ö†Ô∏è'; colorClass = 'text-warning'; break;
                case 'info': icon = '‚ÑπÔ∏è'; colorClass = 'text-info'; break;
            }
            
            logArea.innerHTML += `<div class="${colorClass}"><small class="text-muted">[${time}]</small> ${icon} ${message}</div>`;
            logArea.scrollTop = logArea.scrollHeight;
        }

        // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞
        function clearLog() {
            document.getElementById('log-area').innerHTML = '<div class="text-muted">–õ–æ–≥ –æ—á–∏—â–µ–Ω...</div>';
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        function updateStatus(service, status, message) {
            const statusIcon = document.getElementById(`status-${service}`);
            const statusText = document.getElementById(`text-${service}`);
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
            statusIcon.classList.remove('status-success', 'status-warning', 'status-error');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å
            statusIcon.classList.add(`status-${status}`);
            statusText.textContent = message;
            
            log(`${service.toUpperCase()}: ${message}`, status);
        }

        // –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ API
        async function testApiStatus() {
            log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤ API...', 'info');
            
            try {
                const response = await fetch('/issledovatel/api/check_status.php');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                log('üì° –û—Ç–≤–µ—Ç –æ—Ç API –ø–æ–ª—É—á–µ–Ω', 'success');
                
                // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
                const mapStatus = (color) => {
                    switch(color) {
                        case 'green': return 'success';
                        case 'yellow': return 'warning';
                        case 'red': return 'error';
                        default: return 'error';
                    }
                };
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
                updateStatus('openai', mapStatus(data.openai), data.error_messages?.openai || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
                updateStatus('deepseek', mapStatus(data.deepseek), data.error_messages?.deepseek || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
                updateStatus('yandex', mapStatus(data.yandex), data.error_messages?.yandex || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
                
                log(`üéØ –ê–∫—Ç–∏–≤–Ω—ã–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${data.ai_provider}`, 'info');
                log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
                
            } catch (error) {
                log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: ${error.message}`, 'error');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ—à–∏–±–∫–∏
                updateStatus('openai', 'error', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
                updateStatus('deepseek', 'error', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
                updateStatus('yandex', 'error', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            }
        }

        // –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        async function testQuery() {
            const query = document.getElementById('test-query').value.trim();
            
            if (!query) {
                log('‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
                return;
            }
            
            log(`üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: "${query}"`, 'info');
            
            try {
                const response = await fetch('/issledovatel/api/process_query.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ query: query })
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    log('‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                    
                    if (data.progress && data.progress.length > 0) {
                        log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${data.progress.length}`, 'info');
                        data.progress.forEach((step, index) => {
                            log(`  üìç –≠—Ç–∞–ø ${index + 1}: ${step}`, 'info');
                        });
                    }
                    
                    if (data.answer) {
                        const answerPreview = data.answer.length > 200 ? 
                            data.answer.substring(0, 200) + '...' : 
                            data.answer;
                        log(`üí¨ –û—Ç–≤–µ—Ç: ${answerPreview}`, 'success');
                    }
                    
                    if (data.sources && data.sources.length > 0) {
                        log(`üìÑ –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${data.sources.length}`, 'info');
                    }
                    
                } else {
                    log(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
                }
                
            } catch (error) {
                log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'error');
            }
        }

        // –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        document.addEventListener('DOMContentLoaded', function() {
            log('üöÄ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'info');
            testApiStatus();
        });
    </script>
</body>
</html>
