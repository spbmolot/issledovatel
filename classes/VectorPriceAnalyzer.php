<?php
namespace ResearcherAI;

class VectorPriceAnalyzer extends PriceAnalyzer {
    public $vectorCacheManager;
    private $useVectorSearch = true;
    private $aiProvider;
    
    public function __construct($aiProvider, $yandexDisk, $cacheManager) {
        parent::__construct($aiProvider, $yandexDisk, $cacheManager);
        
        $this->aiProvider = $aiProvider;
        $dbBaseDir = dirname(__DIR__) . '/db';
        $this->vectorCacheManager = new VectorCacheManager($dbBaseDir);
        $this->vectorCacheManager->initializeEmbeddingManager($aiProvider);
        
        Logger::info("[VectorPriceAnalyzer] Initialized with vector search capabilities");
    }
    
    public function processQuery($query, $folderPath = '/–ü—Ä–∞–π—Å—ã') {
        $startTime = microtime(true);
        
        try {
            Logger::info("[VectorPriceAnalyzer] Processing query with vector search: {$query}");
            
            if ($this->useVectorSearch) {
                return $this->processQueryWithVectorSearch($query, $folderPath, $startTime);
            } else {
                return parent::processQuery($query, $folderPath);
            }
            
        } catch (\Exception $e) {
            Logger::error('[VectorPriceAnalyzer] Error in processQuery: ' . $e->getMessage());
            Logger::info("[VectorPriceAnalyzer] Falling back to traditional search");
            return parent::processQuery($query, $folderPath);
        }
    }
    
    private function processQueryWithVectorSearch($query, $folderPath, $startTime) {
        $progress = array(); // –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        $progress[] = "üîç –ù–∞—á–∏–Ω–∞—é –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{$query}'";
        $progress[] = "üìä –≠—Ç–∞–ø 1: –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∏–∑ 97 —Ñ–∞–π–ª–æ–≤...";
        
        $similarChunks = $this->vectorCacheManager->findSimilarContent($query, 10);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        $progress[] = "üî§ –≠—Ç–∞–ø 2: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...";
        $textSearchChunks = $this->performTextSearch($query);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        $allChunks = $this->mergeSearchResults($similarChunks, $textSearchChunks);
        
        if (empty($allChunks)) {
            $progress[] = "‚ö†Ô∏è –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫";
            Logger::info("[VectorPriceAnalyzer] No results from hybrid search, using traditional search");
            $result = parent::processQuery($query, $folderPath);
            $result['search_method'] = 'traditional_fallback';
            $result['progress'] = $progress;
            return $result;
        }
        
        $progress[] = "‚úÖ –ù–∞–π–¥–µ–Ω–æ " . count($allChunks) . " —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (–≤–µ–∫—Ç–æ—Ä–Ω—ã–π: " . count($similarChunks) . ", —Ç–µ–∫—Å—Ç–æ–≤—ã–π: " . count($textSearchChunks) . ")";
        Logger::info("[VectorPriceAnalyzer] Found " . count($allChunks) . " chunks total");
        
        $relevantFiles = $this->groupChunksByFiles($allChunks);
        $progress[] = "üìÅ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º: " . count($relevantFiles) . " —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤";
        
        $priceData = array();
        $sources = array();
        $fileProcessed = 0;
        
        foreach ($relevantFiles as $filePath => $chunks) {
            $fileName = basename($filePath);
            $fileProcessed++;
            $progress[] = "üìÑ [{$fileProcessed}/" . count($relevantFiles) . "] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {$fileName}";
            
            $combinedText = $this->combineRelevantChunks($chunks);
            $progress[] = "   ‚îî‚îÄ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " . strlen($combinedText) . " —Å–∏–º–≤–æ–ª–æ–≤";
            
            if (!empty($combinedText)) {
                $priceData[$fileName] = $combinedText;
                $avgSimilarity = $this->calculateAverageSimilarity($chunks);
                $progress[] = "   ‚îî‚îÄ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: " . round($avgSimilarity * 100, 1) . "%";
                
                $sources[] = array(
                    'name' => $fileName,
                    'path' => $filePath,
                    'size' => 0,
                    'modified' => '',
                    'similarity' => $avgSimilarity
                );
            }
        }
        
        if (empty($priceData)) {
            $progress[] = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤";
            return array(
                'response' => '–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö.',
                'sources' => array(),
                'processing_time' => microtime(true) - $startTime,
                'search_method' => 'vector_no_data',
                'progress' => $progress
            );
        }
        
        $totalChars = array_sum(array_map('strlen', $priceData));
        $progress[] = "üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞: {$totalChars} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ " . count($priceData) . " —Ñ–∞–π–ª–æ–≤";
        $progress[] = "‚ö° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ DeepSeek AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞...";
        
        $analysis = $this->aiProvider->analyzeQuery($query, $priceData);
        
        if (isset($analysis['error'])) {
            $progress[] = "‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: " . $analysis['error'];
        } else {
            $progress[] = "‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ";
            $progress[] = "üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏";
        }
        
        Logger::info("[VectorPriceAnalyzer] Vector search completed successfully");
        
        return array(
            'response' => $analysis['text'],
            'sources' => $sources,
            'processing_time' => microtime(true) - $startTime,
            'search_method' => 'vector',
            'progress' => $progress
        );
    }
    
    private function groupChunksByFiles($similarChunks) {
        $grouped = array();
        
        foreach ($similarChunks as $chunk) {
            $filePath = $chunk['file_path'];
            if (!isset($grouped[$filePath])) {
                $grouped[$filePath] = array();
            }
            $grouped[$filePath][] = $chunk;
        }
        
        foreach ($grouped as $filePath => &$chunks) {
            usort($chunks, function($a, $b) {
                return $b['similarity'] <=> $a['similarity'];
            });
        }
        
        return $grouped;
    }
    
    private function combineRelevantChunks($chunks) {
        $texts = array();
        $maxChunks = 5;           // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 —á–∞–Ω–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        $maxCharsPerChunk = 1500; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        $maxTotalChars = 6000;    // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç
        
        $totalChars = 0;
        for ($i = 0; $i < min($maxChunks, count($chunks)); $i++) {
            $chunkText = $chunks[$i]['content'];
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —á–∞–Ω–∫–∞
            $processedChunk = $this->extractKeyInfo($chunkText, $maxCharsPerChunk);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç
            if ($totalChars + strlen($processedChunk) > $maxTotalChars) {
                $remainingChars = $maxTotalChars - $totalChars;
                if ($remainingChars > 200) { // –ú–∏–Ω–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    $processedChunk = substr($processedChunk, 0, $remainingChars) . '...';
                    $texts[] = $processedChunk;
                }
                break;
            }
            
            $texts[] = $processedChunk;
            $totalChars += strlen($processedChunk);
        }
        
        Logger::info("[VectorPriceAnalyzer] Combined text length: {$totalChars} chars from " . count($texts) . " chunks");
        return implode("\n\n=== –§–ê–ô–õ " . ($texts ? count($texts) : 0) . " ===\n", $texts);
    }
    
    private function extractKeyInfo($text, $maxLength) {
        // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–∞–º–∏, –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏, –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
        $lines = explode("\n", $text);
        $keyLines = array();
        $otherLines = array();
        
        foreach ($lines as $line) {
            $line = trim($line);
            if (empty($line)) continue;
            
            // –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: —Ü–µ–Ω—ã, –∞—Ä—Ç–∏–∫—É–ª—ã, –±—Ä–µ–Ω–¥—ã
            if (preg_match('/\d+[.,]\d+|\d+\s*(—Ä—É–±|‚ÇΩ)|–∞—Ä—Ç–∏–∫—É–ª|–∫–æ–¥|brand|–º–æ–¥–µ–ª—å/ui', $line) ||
                strlen($line) < 100) { // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ—É
                $keyLines[] = $line;
            } else {
                $otherLines[] = $line;
            }
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        $result = implode("\n", array_slice($keyLines, 0, 15));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
        if (strlen($result) < $maxLength * 0.7) {
            $remaining = $maxLength - strlen($result) - 10;
            $additional = implode("\n", array_slice($otherLines, 0, 5));
            if (strlen($additional) > $remaining) {
                $additional = substr($additional, 0, $remaining) . '...';
            }
            $result .= "\n" . $additional;
        }
        
        return strlen($result) > $maxLength ? substr($result, 0, $maxLength) . '...' : $result;
    }
    
    private function calculateAverageSimilarity($chunks) {
        if (empty($chunks)) return 0;
        
        $totalSimilarity = array_sum(array_column($chunks, 'similarity'));
        return round($totalSimilarity / count($chunks), 3);
    }
    
    private function performTextSearch($query) {
        try {
            $pdo = $this->vectorCacheManager->getPDO();
            
            // –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            $keywords = $this->extractKeywords($query);
            $chunks = array();
            
            foreach ($keywords as $keyword) {
                if (strlen($keyword) < 3) continue; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                
                $stmt = $pdo->prepare("
                    SELECT file_path, chunk_text, chunk_index 
                    FROM vector_embeddings 
                    WHERE chunk_text LIKE ? 
                    LIMIT 20
                ");
                $stmt->execute(['%' . $keyword . '%']);
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
                
                foreach ($results as $result) {
                    $chunkKey = $result['file_path'] . '_' . $result['chunk_index'];
                    if (!isset($chunks[$chunkKey])) {
                        $chunks[$chunkKey] = array(
                            'file_path' => $result['file_path'],
                            'chunk_text' => $result['chunk_text'],
                            'chunk_index' => $result['chunk_index'],
                            'similarity' => 0.9, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                            'search_type' => 'text'
                        );
                    }
                }
            }
            
            Logger::info("[VectorPriceAnalyzer] Text search found " . count($chunks) . " chunks for keywords: " . implode(', ', $keywords));
            return array_values($chunks);
            
        } catch (\Exception $e) {
            Logger::error("[VectorPriceAnalyzer] Text search error: " . $e->getMessage());
            return array();
        }
    }
    
    private function extractKeywords($query) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        $query = mb_strtolower($query, 'UTF-8');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        $stopWords = array('–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '–æ', '–æ–±', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞');
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
        $words = preg_split('/[\s\-_\.]+/', $query);
        $keywords = array();
        
        foreach ($words as $word) {
            $word = trim($word);
            if (strlen($word) >= 3 && !in_array($word, $stopWords)) {
                $keywords[] = $word;
            }
        }
        
        return $keywords;
    }
    
    private function mergeSearchResults($vectorChunks, $textChunks) {
        $merged = array();
        $seen = array();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        foreach ($textChunks as $chunk) {
            $key = $chunk['file_path'] . '_' . $chunk['chunk_index'];
            if (!isset($seen[$key])) {
                $merged[] = $chunk;
                $seen[$key] = true;
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        foreach ($vectorChunks as $chunk) {
            $key = $chunk['file_path'] . '_' . $chunk['chunk_index'];
            if (!isset($seen[$key])) {
                $chunk['search_type'] = 'vector';
                $merged[] = $chunk;
                $seen[$key] = true;
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–µ—Ä–≤—ã–º–∏)
        usort($merged, function($a, $b) {
            if (isset($a['search_type']) && $a['search_type'] === 'text' && 
                isset($b['search_type']) && $b['search_type'] === 'vector') {
                return -1;
            }
            if (isset($a['search_type']) && $a['search_type'] === 'vector' && 
                isset($b['search_type']) && $b['search_type'] === 'text') {
                return 1;
            }
            return $b['similarity'] <=> $a['similarity'];
        });
        
        Logger::info("[VectorPriceAnalyzer] Merged search results: " . count($merged) . " unique chunks");
        return $merged;
    }
    
    public function getVectorSearchStats() {
        try {
            $vectorizedFiles = $this->vectorCacheManager->getVectorizedFilesPaths();
            
            return array(
                'vectorized_files_count' => count($vectorizedFiles),
                'vector_search_enabled' => $this->useVectorSearch,
                'vectorized_files' => array_map('basename', $vectorizedFiles)
            );
        } catch (\Exception $e) {
            Logger::error("[VectorPriceAnalyzer] Error getting vector stats: " . $e->getMessage());
            return array(
                'vectorized_files_count' => 0,
                'vector_search_enabled' => $this->useVectorSearch,
                'error' => $e->getMessage()
            );
        }
    }
    
    public function enableVectorSearch($enable = true) {
        $this->useVectorSearch = $enable;
        Logger::info("[VectorPriceAnalyzer] Vector search " . ($enable ? 'enabled' : 'disabled'));
    }
}
