<?php
require_once 'vendor/autoload.php';

use ResearcherAI\VectorCacheManager;
use ResearcherAI\AIProviderFactory;

echo "üîç DEBUG: –ê–Ω–∞–ª–∏–∑ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –û–ü–£–°\n\n";

try {
    $dbBaseDir = __DIR__ . '/db';
    $vectorCacheManager = new VectorCacheManager($dbBaseDir);
    
    // –°–æ–∑–¥–∞–µ–º DeepSeek –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    $aiProvider = AIProviderFactory::create('deepseek', 'fake-key');
    $vectorCacheManager->initializeEmbeddingManager($aiProvider);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –û–ü–£–° –≤ –±–∞–∑–µ
    $pdo = new PDO('sqlite:' . $dbBaseDir . '/cache.sqlite');
    
    echo "üìÅ –ü–û–ò–°–ö –§–ê–ô–õ–ê –û–ü–£–° –í –ë–ê–ó–ï:\n";
    $stmt = $pdo->prepare("SELECT file_path, COUNT(*) as chunk_count FROM vector_embeddings WHERE file_path LIKE ? GROUP BY file_path");
    $stmt->execute(['%–û–ü–£–°%']);
    $opus_files = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    if (empty($opus_files)) {
        echo "‚ùå –§–∞–π–ª –û–ü–£–° –ù–ï –ù–ê–ô–î–ï–ù –≤ –±–∞–∑–µ vector_embeddings!\n";
        echo "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n";
        echo "1. –§–∞–π–ª –Ω–µ –±—ã–ª –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n";
        echo "2. –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n";
        echo "3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞\n\n";
    } else {
        echo "‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –û–ü–£–°:\n";
        foreach ($opus_files as $file) {
            echo "  - {$file['file_path']} ({$file['chunk_count']} —á–∞–Ω–∫–æ–≤)\n";
        }
        echo "\n";
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
    echo "üßÆ –¢–ï–°–¢ –ö–û–°–ò–ù–£–°–ù–û–ì–û –°–•–û–î–°–¢–í–ê:\n";
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö embedding
    $text1 = "–ª–∏–Ω–æ–ª–µ—É–º profi premium";
    $text2 = "–ø–∞—Ä–∫–µ—Ç –¥—É–± –Ω–∞—Ç—É—Ä";
    $text3 = "–ª–∏–Ω–æ–ª–µ—É–º profi premium flamenco"; // –û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–π —Ç–µ–∫—Å—Ç
    
    $embedding1 = $vectorCacheManager->getQueryEmbedding($text1);
    $embedding2 = $vectorCacheManager->getQueryEmbedding($text2);
    $embedding3 = $vectorCacheManager->getQueryEmbedding($text3);
    
    echo "Embedding 1 (–ø–µ—Ä–≤—ã–µ 10): " . implode(', ', array_slice($embedding1, 0, 10)) . "\n";
    echo "Embedding 2 (–ø–µ—Ä–≤—ã–µ 10): " . implode(', ', array_slice($embedding2, 0, 10)) . "\n";
    echo "Embedding 3 (–ø–µ—Ä–≤—ã–µ 10): " . implode(', ', array_slice($embedding3, 0, 10)) . "\n\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –≤—Ä—É—á–Ω—É—é
    function calculateCosineSimilarity($vector1, $vector2) {
        if (count($vector1) !== count($vector2)) {
            return 0;
        }
        
        $dotProduct = 0;
        $magnitude1 = 0;
        $magnitude2 = 0;
        
        for ($i = 0; $i < count($vector1); $i++) {
            $dotProduct += $vector1[$i] * $vector2[$i];
            $magnitude1 += $vector1[$i] * $vector1[$i];
            $magnitude2 += $vector2[$i] * $vector2[$i];
        }
        
        $magnitude1 = sqrt($magnitude1);
        $magnitude2 = sqrt($magnitude2);
        
        if ($magnitude1 === 0.0 || $magnitude2 === 0.0) {
            return 0;
        }
        
        return $dotProduct / ($magnitude1 * $magnitude2);
    }
    
    $similarity_1_2 = calculateCosineSimilarity($embedding1, $embedding2);
    $similarity_1_3 = calculateCosineSimilarity($embedding1, $embedding3);
    $similarity_2_3 = calculateCosineSimilarity($embedding2, $embedding3);
    
    echo "üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–•–û–î–°–¢–í–ê:\n";
    echo "–°—Ö–æ–¥—Å—Ç–≤–æ '$text1' vs '$text2': " . round($similarity_1_2, 6) . "\n";
    echo "–°—Ö–æ–¥—Å—Ç–≤–æ '$text1' vs '$text3': " . round($similarity_1_3, 6) . "\n";
    echo "–°—Ö–æ–¥—Å—Ç–≤–æ '$text2' vs '$text3': " . round($similarity_2_3, 6) . "\n\n";
    
    if ($similarity_1_2 === 0.0 && $similarity_1_3 === 0.0 && $similarity_2_3 === 0.0) {
        echo "‚ùå –í–°–ï –°–•–û–î–°–¢–í–ê = 0! –ü—Ä–æ–±–ª–µ–º–∞ —Å hash-based embedding!\n";
        echo "Hash-based –≤–µ–∫—Ç–æ—Ä—ã DeepSeek —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∏–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ\n\n";
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    echo "üìä –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –í–ï–ö–¢–û–†–û–í –ò–ó –ë–ê–ó–´:\n";
    $stmt = $pdo->prepare("SELECT file_path, embedding FROM vector_embeddings LIMIT 3");
    $stmt->execute();
    $sample_vectors = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    foreach ($sample_vectors as $i => $row) {
        $vector = json_decode($row['embedding'], true);
        if ($vector === null) {
            echo "–í–µ–∫—Ç–æ—Ä #" . ($i + 1) . ": –û–®–ò–ë–ö–ê –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON\n";
            continue;
        }
        
        echo "–í–µ–∫—Ç–æ—Ä #" . ($i + 1) . " (—Ñ–∞–π–ª: " . basename($row['file_path']) . "):\n";
        echo "  –†–∞–∑–º–µ—Ä: " . count($vector) . "\n";
        echo "  –ü–µ—Ä–≤—ã–µ 10: " . implode(', ', array_slice($vector, 0, 10)) . "\n";
        echo "  –°—É–º–º–∞: " . round(array_sum($vector), 4) . "\n";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        $unique_values = array_unique($vector);
        echo "  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: " . count($unique_values) . " –∏–∑ " . count($vector) . "\n";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–∞—Ä—ã–µ –∑–∞–≥–ª—É—à–∫–∏ (–≤—Å–µ 0.1)
        $all_same = count($unique_values) === 1 && abs($vector[0] - 0.1) < 0.001;
        if ($all_same) {
            echo "  ‚ö†Ô∏è  –°–¢–ê–†–´–ô –í–ï–ö–¢–û–†-–ó–ê–ì–õ–£–®–ö–ê (–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è 0.1)!\n";
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        $mean = array_sum($vector) / count($vector);
        $variance = array_sum(array_map(function($x) use ($mean) { 
            return pow($x - $mean, 2); 
        }, $vector)) / count($vector);
        $std_dev = sqrt($variance);
        echo "  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: " . round($std_dev, 4) . "\n\n";
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ
    echo "üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–†–´–• –í–ï–ö–¢–û–†–û–í:\n";
    $stmt = $pdo->prepare("SELECT COUNT(*) as count FROM vector_embeddings WHERE embedding LIKE '%0.1,0.1,0.1%'");
    $stmt->execute();
    $old_vectors_count = $stmt->fetch(PDO::FETCH_ASSOC)['count'];
    echo "–°—Ç–∞—Ä—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ (–∑–∞–≥–ª—É—à–µ–∫): $old_vectors_count\n";
    
    $stmt = $pdo->prepare("SELECT COUNT(*) as count FROM vector_embeddings");
    $stmt->execute();
    $total_vectors = $stmt->fetch(PDO::FETCH_ASSOC)['count'];
    echo "–í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: $total_vectors\n\n";
    
    if ($old_vectors_count > 0) {
        echo "‚ö†Ô∏è  –í –±–∞–∑–µ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ–∫—Ç–æ—Ä—ã-–∑–∞–≥–ª—É—à–∫–∏! –ù—É–∂–Ω–∞ —Ä–µ–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n\n";
    }
    
} catch (Exception $e) {
    echo "‚ùå –û–®–ò–ë–ö–ê: " . $e->getMessage() . "\n";
}
