<?php

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DeepSeek R1 —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
 * –§–∞–π–ª ‚Üí PHPSpreadsheet ‚Üí –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç ‚Üí DeepSeek R1 –∞–Ω–∞–ª–∏–∑/OpenAI Embedding ‚Üí –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 */

require_once 'vendor/autoload.php';
require_once 'config/database.php'; // –ü–æ–¥–∫–ª—é—á–∞–µ–º MySQL –±–∞–∑—É Bitrix

use ResearcherAI\Logger;
use ResearcherAI\AIProviderFactory;
use ResearcherAI\YandexDiskClient;
use ResearcherAI\VectorCacheManager;
use ResearcherAI\FileParser;
use ResearcherAI\CacheManager;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ SSH
function showProgressBar($current, $total, $prefix = '', $width = 50) {
    $percent = round(($current / $total) * 100);
    $filled = round(($width * $current) / $total);
    $empty = $width - $filled;

    $bar = str_repeat('‚ñà', $filled) . str_repeat('‚ñë', $empty);
    $info = sprintf("%s [%s] %d%% (%d/%d)", $prefix, $bar, $percent, $current, $total);
    
    echo "\r" . $info;
    if ($current == $total) {
        echo "\n";
    }
}

echo "üöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø –° DEEPSEEK R1 –ü–û–î–î–ï–†–ñ–ö–û–ô\n";
echo "===============================================\n\n";

try {
    $startTime = time();
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ MySQL
    echo "üîß –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ MySQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n";
    
    try {
        $settingsStmt = $mysql_pdo->prepare("SELECT setting_key, setting_value FROM researcher_settings");
        $settingsStmt->execute();
        $settingsRows = $settingsStmt->fetchAll();
        
        $settings = array();
        foreach ($settingsRows as $row) {
            $settings[$row['setting_key']] = $row['setting_value'];
        }
        
        if (empty($settings)) {
            echo "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ researcher_settings\n";
            exit(1);
        }
    } catch (Exception $e) {
        echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: " . $e->getMessage() . "\n";
        exit(1);
    }

    echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ MySQL:\n";
    echo "   - AI Provider: " . ($settings['ai_provider'] ?? 'deepseek') . "\n";
    echo "   - Yandex Folder: " . ($settings['yandex_folder'] ?? '/2 –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ü–†–ê–ô–°–´') . "\n";
    echo "   - Yandex Token: [" . strlen($settings['yandex_token']) . " —Å–∏–º–≤–æ–ª–æ–≤]\n\n";

    // –°–æ–∑–¥–∞–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    $aiProvider = AIProviderFactory::create(
        $settings['ai_provider'] ?? 'deepseek',
        $settings['ai_provider'] === 'openai' ? $settings['openai_key'] : $settings['deepseek_key'],
        !empty($settings['proxy_enabled']) && !empty($settings['proxy_url']) ? $settings['proxy_url'] : null
    );

    $yandexClient = new YandexDiskClient($settings['yandex_token']);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
    $dbBaseDir = __DIR__ . '/db';
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    $cacheManager = new CacheManager($dbBaseDir);
    $vectorCacheManager = new VectorCacheManager($dbBaseDir);
    $vectorCacheManager->initializeEmbeddingManager($aiProvider);
    $fileParser = new FileParser();

    echo "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n";
    echo "   - AI Provider: " . get_class($aiProvider) . "\n";
    echo "   - Database: {$dbBaseDir}/cache.sqlite\n\n";

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
    echo "üì• –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞...\n";
    $files = $yandexClient->listFiles($settings['yandex_folder'] ?? '/2 –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ü–†–ê–ô–°–´');

    if (empty($files)) {
        echo "‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ\n";
        exit(1);
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã
    $excelFiles = array_filter($files, function($file) {
        $extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
        return in_array($extension, ['xlsx', 'xls']);
    });

    echo "üîç –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: " . count($excelFiles) . " –∏–∑ " . count($files) . " –æ–±—â–∏—Ö —Ñ–∞–π–ª–æ–≤\n\n";

    if (empty($excelFiles)) {
        echo "‚ùå Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n";
        exit(1);
    }

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    $providerClass = get_class($aiProvider);
    $isDeepSeek = (strpos($providerClass, 'DeepSeek') !== false);
    
    if ($isDeepSeek) {
        echo "üß† –†–ï–ñ–ò–ú: DeepSeek R1 - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ + –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n";
        echo "   üìä –≠—Ç–∞–ø—ã: –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç ‚Üí R1 –∞–Ω–∞–ª–∏–∑ ‚Üí –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí Hash-based –≤–µ–∫—Ç–æ—Ä—ã\n";
    } else {
        echo "‚ö° –†–ï–ñ–ò–ú: OpenAI - –ü—Ä—è–º–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n";
        echo "   üìä –≠—Ç–∞–ø—ã: –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç ‚Üí OpenAI embeddings ‚Üí –í–µ–∫—Ç–æ—Ä—ã\n";
    }
    echo "\n";

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã
    $processedFiles = 0;
    $successfulVectorizations = 0;
    $failedVectorizations = 0;
    $totalChunks = 0;
    $vectorizationStartTime = time();

    foreach ($excelFiles as $index => $file) {
        echo "\nüìÑ [" . ($index+1) . "/" . count($excelFiles) . "] " . $file['name'] . "\n";

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            $cacheKey = md5($file['path']);
            $cachedText = $cacheManager->getCachedText($cacheKey);

            if ($cachedText) {
                echo "   üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Ä–∞–∑–º–µ—Ä: " . strlen($cachedText) . " —Å–∏–º–≤–æ–ª–æ–≤)\n";
                $rawText = $cachedText;
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                echo "   üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞...\n";
                $downloadUrl = $yandexClient->getDownloadUrl($file['path']);
                if (!$downloadUrl) {
                    echo "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n";
                    $failedVectorizations++;
                    continue;
                }

                $tempFile = sys_get_temp_dir() . '/' . $file['name'];

                if (!$yandexClient->downloadFile($downloadUrl, $tempFile)) {
                    echo "   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞\n";
                    $failedVectorizations++;
                    continue;
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                echo "   üìä –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ Excel —Ñ–∞–π–ª–∞...\n";
                $fileContent = file_get_contents($tempFile);
                $extractedData = $fileParser->parse($fileContent, $file['name']);

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç
                $rawText = '';
                if (is_array($extractedData) && !empty($extractedData)) {
                    foreach ($extractedData as $row) {
                        if (is_array($row)) {
                            $rawText .= implode(' | ', array_filter($row)) . "\n";
                        } else {
                            $rawText .= $row . "\n";
                        }
                    }
                } else {
                    $rawText = is_string($extractedData) ? $extractedData : '';
                }

                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if (file_exists($tempFile)) {
                    unlink($tempFile);
                }

                if (empty($rawText)) {
                    echo "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞\n";
                    $failedVectorizations++;
                    continue;
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                echo "   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫—ç—à...\n";
                $cacheManager->setCache($file['path'], $file['modified'] ?? '', '', $rawText);
            }

            echo "   üìè –†–∞–∑–º–µ—Ä —Å—ã—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: " . strlen($rawText) . " —Å–∏–º–≤–æ–ª–æ–≤\n";

            // –ö–õ–Æ–ß–ï–í–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π R1
            echo "   üîÑ –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...\n";
            
            if ($vectorCacheManager->storeVectorDataEnhanced($file['path'], $rawText, $aiProvider)) {
                $successfulVectorizations++;
                echo "   ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω\n";
            } else {
                $failedVectorizations++;
                echo "   ‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n";
            }

            $processedFiles++;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            $elapsedTime = time() - $vectorizationStartTime;
            $eta = $elapsedTime / ($processedFiles + 1) * (count($excelFiles) - $processedFiles);
            $etaStr = gmdate("H:i:s", $eta);
            showProgressBar($processedFiles, count($excelFiles), "–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (ETA: {$etaStr})", 50);

        } catch (Exception $e) {
            echo "   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: " . $e->getMessage() . "\n";
            $failedVectorizations++;
        }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    $totalTime = time() - $startTime;
    $vectorizationTime = time() - $vectorizationStartTime;
    
    echo "\n\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–õ–£–ß–®–ï–ù–ù–û–ô –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò:\n";
    echo "=====================================\n";
    echo "‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " . gmdate("H:i:s", $totalTime) . "\n";
    echo "‚è±Ô∏è  –í—Ä–µ–º—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " . gmdate("H:i:s", $vectorizationTime) . "\n";
    echo "üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: " . $processedFiles . " –∏–∑ " . count($excelFiles) . "\n";
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: " . $successfulVectorizations . "\n";
    echo "‚ùå –ù–µ—É–¥–∞—á–Ω–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: " . $failedVectorizations . "\n";
    echo "üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " . round(($successfulVectorizations / count($excelFiles)) * 100, 1) . "%\n";
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
    $vectorStats = $vectorCacheManager->getVectorizationStats();
    echo "üìä –í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ë–î: " . $vectorStats['vectorized_files_count'] . "\n";
    
    if ($isDeepSeek) {
        echo "\nüß† DEEPSEEK R1 –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
        echo "   üìà –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞\n";
        echo "   üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ü–µ–Ω –∏ —Ç–æ–≤–∞—Ä–æ–≤\n";
        echo "   üßπ –û—á–∏—Å—Ç–∫–∞ –æ—Ç —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n";
        echo "   üîç –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞\n";
    } else {
        echo "\n‚ö° OPENAI –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
        echo "   üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n";
        echo "   üíé –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ–∫—Ç–æ—Ä—ã\n";
        echo "   üîÑ –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n";
    }
    
    echo "\nüöÄ –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ AI-–ø–æ–∏—Å–∫—É!\n";

} catch (Exception $e) {
    echo "\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: " . $e->getMessage() . "\n";
    echo "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n" . $e->getTraceAsString() . "\n";
    exit(1);
}

?>
