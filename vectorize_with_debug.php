<?php
/**
 * –°–∫—Ä–∏–ø—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º debug-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * –¢–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ production
 */

require_once 'vendor/autoload.php';

use ResearcherAI\Logger;
use ResearcherAI\YandexDiskClient;
use ResearcherAI\VectorPriceAnalyzer;
use ResearcherAI\VectorCacheManager;
use ResearcherAI\FileParser;
use ResearcherAI\CacheManager;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ SSH
function showProgressBar($current, $total, $prefix = '', $width = 50) {
    $percent = round(($current / $total) * 100);
    $filled = round(($width * $current) / $total);
    $empty = $width - $filled;
    
    $bar = str_repeat('‚ñà', $filled) . str_repeat('‚ñë', $empty);
    $info = sprintf("%s [%s] %d%% (%d/%d)", $prefix, $bar, $percent, $current, $total);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –Ω–æ–≤—É—é
    echo "\r" . str_pad($info, 100, ' ') . "\r";
    if ($current == $total) {
        echo "\n"; // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ
    }
}

// –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º debug-—Ä–µ–∂–∏–º –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
class DebugVectorCacheManager extends VectorCacheManager {
    public function storeVectorData($filePath, $chunks) {
        if (!$this->isEmbeddingManagerInitialized()) {
            echo "   [DEBUG] ‚ùå EmbeddingManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n";
            return false;
        }

        echo "   [DEBUG] storeVectorData() –≤—ã–∑–≤–∞–Ω –¥–ª—è: {$filePath}\n";
        echo "   [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: " . count($chunks) . "\n";
        echo "   [DEBUG] ‚úÖ EmbeddingManager –ø—Ä–æ–≤–µ—Ä–µ–Ω\n";
        echo "   [DEBUG] –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SQL statement...\n";
        
        try {
            $stmt = $this->pdo->prepare("INSERT INTO vector_embeddings (file_path, chunk_text, embedding, chunk_index) VALUES (?, ?, ?, ?)");
            echo "   [DEBUG] ‚úÖ SQL statement –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω\n";
        } catch (\Exception $e) {
            echo "   [DEBUG] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ SQL: " . $e->getMessage() . "\n";
            return false;
        }

        $stored = 0;
        foreach ($chunks as $index => $chunk) {
            try {
                echo "   [DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ #" . ($index + 1) . "\n";
                echo "   [DEBUG] –í—ã–∑—ã–≤–∞–µ–º getEmbedding()...\n";
                
                $embedding = $this->embeddingManager->getEmbedding($chunk);
                
                if ($embedding === null || !is_array($embedding)) {
                    echo "   [DEBUG] ‚ùå Embedding = null –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤ –¥–ª—è —á–∞–Ω–∫–∞ #" . ($index + 1) . "\n";
                    continue;
                }

                echo "   [DEBUG] ‚úÖ Embedding –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: " . count($embedding) . "\n";
                
                $embeddingJson = json_encode($embedding);
                if ($embeddingJson === false) {
                    echo "   [DEBUG] ‚ùå –û—à–∏–±–∫–∞ JSON –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∞–Ω–∫–∞ #" . ($index + 1) . "\n";
                    continue;
                }
                
                echo "   [DEBUG] JSON —Ä–∞–∑–º–µ—Ä: " . strlen($embeddingJson) . " —Å–∏–º–≤–æ–ª–æ–≤\n";
                echo "   [DEBUG] –í—ã–ø–æ–ª–Ω—è–µ–º SQL INSERT...\n";
                
                $stmt->execute([$filePath, $chunk, $embeddingJson, $index]);
                $stored++;
                
                echo "   [DEBUG] ‚úÖ –ß–∞–Ω–∫ #" . ($index + 1) . " —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î\n";
                
            } catch (\Exception $e) {
                echo "   [DEBUG] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —á–∞–Ω–∫–µ #" . ($index + 1) . ": " . $e->getMessage() . "\n";
                continue;
            }
        }

        echo "   [DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {$stored} –∏–∑ " . count($chunks) . "\n";
        if ($stored > 0) {
            echo "   [DEBUG] ‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {$stored} —á–∞–Ω–∫–æ–≤\n";
        } else {
            echo "   [DEBUG] ‚ùå –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å\n";
        }
        
        return $stored > 0;
    }
}

echo "\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å debug-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...\n\n";

try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤  
    $dbBaseDir = __DIR__ . '/db';
    $cacheManager = new CacheManager($dbBaseDir);
    $fileParser = new FileParser();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Yandex —Ç–æ–∫–µ–Ω–∞
    $settings = $cacheManager->getSettings();
    if (!isset($settings['yandex_token'])) {
        echo "‚ùå –û—à–∏–±–∫–∞: Yandex —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n";
        exit(1);
    }
    
    $yandexClient = new YandexDiskClient($settings['yandex_token']);
    
    // –°–æ–∑–¥–∞–µ–º debug –≤–µ—Ä—Å–∏—é VectorCacheManager
    $vectorCacheManager = new DebugVectorCacheManager($dbBaseDir);
    
    // –°–æ–∑–¥–∞–µ–º VectorPriceAnalyzer —Å debug –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    $vectorAnalyzer = new VectorPriceAnalyzer($vectorCacheManager);
    
    echo "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n";
    echo "‚úÖ VectorPriceAnalyzer –≥–æ—Ç–æ–≤\n\n";

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    $folderPath = '/2 –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ü–†–ê–ô–°–´';
    echo "üìÅ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {$folderPath}\n\n";
    
    $files = $yandexClient->listFiles($folderPath);
    if (empty($files)) {
        echo "‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ {$folderPath}\n";
        exit(1);
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã
    $excelFiles = array_filter($files, function($file) {
        return strpos($file['name'], '.xlsx') !== false;
    });

    echo "üîç –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: " . count($excelFiles) . " –∏–∑ " . count($files) . " –æ–±—â–∏—Ö —Ñ–∞–π–ª–æ–≤\n\n";
    
    if (empty($excelFiles)) {
        echo "‚ùå Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n";
        exit(1);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã
    $processedFiles = 0;
    $successfulVectorizations = 0;
    $failedVectorizations = 0;
    $totalChunks = 0;
    $startTime = time();

    foreach ($excelFiles as $index => $file) {
        echo "\nüìÑ [" . ($index+1) . "/" . count($excelFiles) . "] " . $file['name'] . "\n";
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            echo "   üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞...\n";
            $downloadUrl = $yandexClient->getDownloadUrl($file['path']);
            $tempFile = sys_get_temp_dir() . '/' . $file['name'];
            
            if (!$yandexClient->downloadFile($downloadUrl, $tempFile)) {
                echo "   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞\n";
                $failedVectorizations++;
                continue;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            echo "   üìä –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ Excel —Ñ–∞–π–ª–∞...\n";
            $text = $fileParser->extractTextFromFile($tempFile);
            
            if (empty($text)) {
                echo "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç\n";
                unlink($tempFile);
                $failedVectorizations++;
                continue;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à  
            echo "   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫—ç—à...\n";
            $cacheManager->storeFileText($file['path'], $text);

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
            $chunks = [$text]; // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏
            echo "   [DEBUG] ‚úÖ –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ " . count($chunks) . " —á–∞–Ω–∫–æ–≤...\n";
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞–Ω–∫–∞
            foreach ($chunks as $i => $chunk) {
                echo "   [DEBUG] –ß–∞–Ω–∫ #" . ($i + 1) . ": " . substr($chunk, 0, 50) . "...\n";
            }

            // –í–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä—É–µ–º
            if ($vectorCacheManager->storeVectorData($file['path'], $chunks)) {
                $successfulVectorizations++;
                $totalChunks += count($chunks);
                echo "   ‚úÖ –§–∞–π–ª –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω\n";
            } else {
                $failedVectorizations++;
                echo "   ‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n";
            }

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            unlink($tempFile);
            $processedFiles++;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            $elapsedTime = time() - $startTime;
            $eta = $elapsedTime / ($processedFiles + 1) * (count($excelFiles) - $processedFiles);
            $etaStr = gmdate("H:i:s", $eta);
            showProgressBar($processedFiles, count($excelFiles), "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (ETA: {$etaStr})", 50);
            
        } catch (Exception $e) {
            echo "   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: " . $e->getMessage() . "\n";
            $failedVectorizations++;
            if (isset($tempFile) && file_exists($tempFile)) {
                unlink($tempFile);
            }
        }
        
        echo "\n";
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    $totalTime = time() - $startTime;
    $timeStr = gmdate("H:i:s", $totalTime);
    
    echo "\n\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n";
    echo "   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$timeStr}\n";
    echo "   üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {$processedFiles} –∏–∑ " . count($excelFiles) . "\n";
    echo "   ‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {$successfulVectorizations}\n";
    echo "   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {$failedVectorizations}\n";
    echo "   üìä –í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤: {$totalChunks}\n\n";

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
    $stats = $vectorCacheManager->getVectorizationStats();
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ë–î:\n";
    echo "   - –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: " . $stats['vectorized_files_count'] . "\n\n";

} catch (Exception $e) {
    echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    exit(1);
}
?>
