
<?php

require_once '../config/database.php';



mb_internal_encoding('UTF-8');

mb_http_output('UTF-8');



header('Content-Type: application/json; charset=utf-8');

header('Access-Control-Allow-Origin: *');



try {

    $stmt = $pdo->prepare("SELECT * FROM researcher_settings WHERE id = 1");

    $stmt->execute();

    $settings = $stmt->fetch();

    

    $status = [

        'openai' => 'red',      // red, yellow, green

        'deepseek' => 'red',    // red, yellow, green  

        'yandex' => 'red',      // red, green (—Ç–æ–ª—å–∫–æ 2 —Å–æ—Å—Ç–æ—è–Ω–∏—è)

        'ai_provider' => 'openai',

        'error_messages' => []

    ];

    

    if (!$settings) {

        $status['error_messages']['general'] = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';

        echo json_encode($status, JSON_UNESCAPED_UNICODE);

        exit;

    }

    

    $status['ai_provider'] = $settings['ai_provider'] ?? 'openai';

    

    // –ü–†–û–í–ï–†–ö–ê OPENAI API —Å —Ç—Ä–µ—Ö—Ü–≤–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π

    if (!empty($settings['openai_key'])) {

        try {

            // –î–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å

            $testData = [

                'model' => 'gpt-3.5-turbo',

                'messages' => [

                    ['role' => 'user', 'content' => 'Hi']

                ],

                'max_tokens' => 5

            ];

            

            $ch = curl_init();

            curl_setopt_array($ch, [

                CURLOPT_URL => 'https://api.openai.com/v1/chat/completions',

                CURLOPT_RETURNTRANSFER => true,

                CURLOPT_POST => true,

                CURLOPT_POSTFIELDS => json_encode($testData),

                CURLOPT_HTTPHEADER => [

                    'Authorization: Bearer ' . $settings['openai_key'],

                    'Content-Type: application/json'

                ],

                CURLOPT_TIMEOUT => 15,

                CURLOPT_SSL_VERIFYPEER => false

            ]);

            

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

            if (!empty($settings['proxy_url']) && $settings['proxy_enabled']) {

                curl_setopt($ch, CURLOPT_PROXY, $settings['proxy_url']);

                curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);

            }

            

            $response = curl_exec($ch);

            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

            $error = curl_error($ch);

            curl_close($ch);

            

            if ($error) {

                $status['openai'] = 'red';

                $status['error_messages']['openai'] = 'üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' . $error;

            } elseif ($httpCode === 200) {

                $data = json_decode($response, true);

                if (isset($data['choices'][0]['message']['content'])) {

                    $status['openai'] = 'green';

                    $status['error_messages']['openai'] = 'üü¢ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è';

                } else {

                    $status['openai'] = 'red';

                    $status['error_messages']['openai'] = 'üî¥ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API';

                }

            } elseif ($httpCode === 401) {

                $status['openai'] = 'red';

                $status['error_messages']['openai'] = 'üî¥ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á';

            } elseif ($httpCode === 429) {

                // Rate limit - –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —á—Ç–æ –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ª–∏–º–∏—Ç—ã

                $status['openai'] = 'yellow';

                $status['error_messages']['openai'] = 'üü° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';

            } elseif ($httpCode === 402 || $httpCode === 403) {

                // Payment required –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤

                $status['openai'] = 'yellow';

                $status['error_messages']['openai'] = 'üü° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ OpenAI';

            } else {

                $errorData = json_decode($response, true);

                $errorMessage = $errorData['error']['message'] ?? "HTTP $httpCode";

                

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –±–∞–ª–∞–Ω—Å–∞

                if (strpos(strtolower($errorMessage), 'insufficient') !== false || 

                    strpos(strtolower($errorMessage), 'quota') !== false ||

                    strpos(strtolower($errorMessage), 'billing') !== false) {

                    $status['openai'] = 'yellow';

                    $status['error_messages']['openai'] = 'üü° –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º: ' . $errorMessage;

                } else {

                    $status['openai'] = 'red';

                    $status['error_messages']['openai'] = 'üî¥ –û—à–∏–±–∫–∞ API: ' . $errorMessage;

                }

            }

        } catch (Exception $e) {

            $status['openai'] = 'red';

            $status['error_messages']['openai'] = 'üî¥ –û—à–∏–±–∫–∞: ' . $e->getMessage();

        }

    } else {

        $status['openai'] = 'red';

        $status['error_messages']['openai'] = 'üî¥ API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';

    }

    

    // –ü–†–û–í–ï–†–ö–ê DEEPSEEK API —Å —Ç—Ä–µ—Ö—Ü–≤–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π

    if (!empty($settings['deepseek_key'])) {

        try {

            $testData = [

                'model' => 'deepseek-reasoner',

                'messages' => [

                    ['role' => 'user', 'content' => '–ü—Ä–∏–≤–µ—Ç']

                ],

                'max_tokens' => 1000

            ];

            

            $ch = curl_init();

            curl_setopt_array($ch, [

                CURLOPT_URL => 'https://api.deepseek.com/v1/chat/completions',

                CURLOPT_RETURNTRANSFER => true,

                CURLOPT_POST => true,

                CURLOPT_POSTFIELDS => json_encode($testData),

                CURLOPT_HTTPHEADER => [

                    'Authorization: Bearer ' . $settings['deepseek_key'],

                    'Content-Type: application/json'

                ],

                CURLOPT_TIMEOUT => 15,

                CURLOPT_SSL_VERIFYPEER => false

            ]);

            

            $response = curl_exec($ch);

            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

            $error = curl_error($ch);

            curl_close($ch);

            

            if ($error) {

                $status['deepseek'] = 'red';

                $status['error_messages']['deepseek'] = 'üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' . $error;

            } elseif ($httpCode === 200) {

                $data = json_decode($response, true);

                if (isset($data['error'])) {

                    $status['deepseek'] = 'red';

                    $status['error_messages']['deepseek'] = 'üî¥ –û—à–∏–±–∫–∞ API: ' . ($data['error']['message'] ?? 'unknown');

                } else {

                    // –î–ª—è –º–æ–¥–µ–ª–∏ deepseek-reasoner –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—à–Ω–æ–≥–æ HTTP 200

                    $status['deepseek'] = 'green';

                    $status['error_messages']['deepseek'] = 'üü¢ API —Ä–∞–±–æ—Ç–∞–µ—Ç';

                }

            } elseif ($httpCode === 401) {

                $status['deepseek'] = 'red';

                $status['error_messages']['deepseek'] = 'üî¥ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á';

            } elseif ($httpCode === 400) {

                $errorData = json_decode($response, true);

                $errorMessage = $errorData['error']['message'] ?? 'HTTP 400';

                

                // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê "Insufficient Balance"

                if (strpos($errorMessage, 'Insufficient Balance') !== false) {

                    $status['deepseek'] = 'yellow';

                    $status['error_messages']['deepseek'] = 'üü° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ DeepSeek';

                } else {

                    $status['deepseek'] = 'red';

                    $status['error_messages']['deepseek'] = 'üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ' . $errorMessage;

                }

            } elseif ($httpCode === 429) {

                $status['deepseek'] = 'yellow';

                $status['error_messages']['deepseek'] = 'üü° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ DeepSeek';

            } else {

                $status['deepseek'] = 'red';

                $status['error_messages']['deepseek'] = 'üî¥ HTTP –æ—à–∏–±–∫–∞: ' . $httpCode;

            }

        } catch (Exception $e) {

            $status['deepseek'] = 'red';

            $status['error_messages']['deepseek'] = 'üî¥ –û—à–∏–±–∫–∞: ' . $e->getMessage();

        }

    } else {

        $status['deepseek'] = 'red';

        $status['error_messages']['deepseek'] = 'üî¥ API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';

    }

    

    // –ü–†–û–í–ï–†–ö–ê YANDEX DISK API (—Ç–æ–ª—å–∫–æ –∑–µ–ª–µ–Ω—ã–π/–∫—Ä–∞—Å–Ω—ã–π)

    if (!empty($settings['yandex_token'])) {

        try {

            $ch = curl_init();

            curl_setopt_array($ch, [

                CURLOPT_URL => 'https://cloud-api.yandex.net/v1/disk',

                CURLOPT_RETURNTRANSFER => true,

                CURLOPT_HTTPHEADER => [

                    'Authorization: OAuth ' . $settings['yandex_token']

                ],

                CURLOPT_TIMEOUT => 10,

                CURLOPT_SSL_VERIFYPEER => false

            ]);

            

            $response = curl_exec($ch);

            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

            $error = curl_error($ch);

            curl_close($ch);

            

            if ($error) {

                $status['yandex'] = 'red';

                $status['error_messages']['yandex'] = 'üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' . $error;

            } elseif ($httpCode === 200) {

                $data = json_decode($response, true);

                if (isset($data['total_space'])) {

                    $status['yandex'] = 'green';

                    $status['error_messages']['yandex'] = 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É';

                } else {

                    $status['yandex'] = 'red';

                    $status['error_messages']['yandex'] = 'üî¥ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API';

                }

            } elseif ($httpCode === 401) {

                $status['yandex'] = 'red';

                $status['error_messages']['yandex'] = 'üî¥ –ù–µ–≤–µ—Ä–Ω—ã–π OAuth —Ç–æ–∫–µ–Ω';

            } else {

                $status['yandex'] = 'red';

                $status['error_messages']['yandex'] = 'üî¥ HTTP –æ—à–∏–±–∫–∞: ' . $httpCode;

            }

        } catch (Exception $e) {

            $status['yandex'] = 'red';

            $status['error_messages']['yandex'] = 'üî¥ –û—à–∏–±–∫–∞: ' . $e->getMessage();

        }

    } else {

        $status['yandex'] = 'red';

        $status['error_messages']['yandex'] = 'üî¥ OAuth —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';

    }

    

    echo json_encode($status, JSON_UNESCAPED_UNICODE);

    

} catch (Exception $e) {

    error_log('Check status error: ' . $e->getMessage());

    echo json_encode([

        'openai' => 'red',

        'deepseek' => 'red', 

        'yandex' => 'red',

        'error_messages' => ['general' => 'üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' . $e->getMessage()]

    ], JSON_UNESCAPED_UNICODE);

}

?>
