<?php

/**

 * –°–∫—Ä–∏–ø—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º debug-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

 */



require_once 'vendor/autoload.php';

require_once 'config/database.php'; // –ü–æ–¥–∫–ª—é—á–∞–µ–º MySQL –±–∞–∑—É Bitrix



use ResearcherAI\Logger;

use ResearcherAI\AIProviderFactory;

use ResearcherAI\YandexDiskClient;

use ResearcherAI\VectorPriceAnalyzer;

use ResearcherAI\VectorCacheManager;

use ResearcherAI\FileParser;

use ResearcherAI\CacheManager;



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ SSH

function showProgressBar($current, $total, $prefix = '', $width = 50) {

    $percent = round(($current / $total) * 100);

    $filled = round(($width * $current) / $total);

    $empty = $width - $filled;



    $bar = str_repeat('‚ñà', $filled) . str_repeat('‚ñë', $empty);

    $info = sprintf("%s [%s] %d%% (%d/%d)", $prefix, $bar, $percent, $current, $total);



    // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –Ω–æ–≤—É—é

    echo "\r" . str_pad($info, 100, ' ') . "\r";

    if ($current == $total) {

        echo "\n"; // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ

    }

}



echo "\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å debug-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...\n\n";



try {

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

    $dbBaseDir = __DIR__ . '/db';

    $cacheManager = new CacheManager($dbBaseDir);

    $fileParser = new FileParser();



    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ MySQL (Bitrix), –∞ –Ω–µ –∏–∑ SQLite

    echo "üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ MySQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Bitrix...\n";

    $stmt = $pdo->prepare("SELECT * FROM researcher_settings WHERE id = 1");

    $stmt->execute();

    $settings = $stmt->fetch(PDO::FETCH_ASSOC);



    if (!$settings || empty($settings['yandex_token'])) {

        echo "‚ùå –û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ Yandex —Ç–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π\n";

        echo "   –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n";

        exit(1);

    }



    echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ MySQL:\n";

    echo "   - AI Provider: " . ($settings['ai_provider'] ?? 'openai') . "\n";

    echo "   - Yandex Folder: " . ($settings['yandex_folder'] ?? '/2 –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ü–†–ê–ô–°–´') . "\n";

    echo "   - Yandex Token: [" . strlen($settings['yandex_token']) . " —Å–∏–º–≤–æ–ª–æ–≤]\n\n";



    // –°–æ–∑–¥–∞–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä

    $aiProvider = AIProviderFactory::create(

        $settings['ai_provider'] ?? 'deepseek',

        $settings['ai_provider'] === 'openai' ? $settings['openai_key'] : $settings['deepseek_key'],

        !empty($settings['proxy_enabled']) && !empty($settings['proxy_url']) ? $settings['proxy_url'] : null

    );



    $yandexClient = new YandexDiskClient($settings['yandex_token']);



    // –°–æ–∑–¥–∞–µ–º VectorCacheManager

    $vectorCacheManager = new VectorCacheManager($dbBaseDir);

    $vectorCacheManager->initializeEmbeddingManager($aiProvider);



    // –°–æ–∑–¥–∞–µ–º VectorPriceAnalyzer

    $vectorAnalyzer = new VectorPriceAnalyzer($aiProvider, $yandexClient, $cacheManager);



    echo "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n";

    echo "‚úÖ VectorPriceAnalyzer –≥–æ—Ç–æ–≤\n\n";



    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤

    $folderPath = $settings['yandex_folder'] ?? '/2 –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ü–†–ê–ô–°–´';

    echo "üìÅ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {$folderPath}\n\n";



    $files = $yandexClient->listFiles($folderPath);

    if (empty($files)) {

        echo "‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ {$folderPath}\n";

        exit(1);

    }



    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã

    $excelFiles = array_filter($files, function($file) {

        return strpos($file['name'], '.xlsx') !== false || strpos($file['name'], '.xls') !== false;

    });



    echo "üîç –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: " . count($excelFiles) . " –∏–∑ " . count($files) . " –æ–±—â–∏—Ö —Ñ–∞–π–ª–æ–≤\n\n";



    if (empty($excelFiles)) {

        echo "‚ùå Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n";

        exit(1);

    }



    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã

    $processedFiles = 0;

    $successfulVectorizations = 0;

    $failedVectorizations = 0;

    $totalChunks = 0;

    $startTime = time();



    foreach ($excelFiles as $index => $file) {

        echo "\nüìÑ [" . ($index+1) . "/" . count($excelFiles) . "] " . $file['name'] . "\n";



        try {

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞

            $cacheKey = md5($file['path']);

            $cachedText = $cacheManager->getCachedText($cacheKey);



            if ($cachedText) {

                echo "   üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n";

                $content = $cachedText;

            } else {

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª

                echo "   üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞...\n";

                $downloadUrl = $yandexClient->getDownloadUrl($file['path']);

                if (!$downloadUrl) {

                    echo "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n";

                    continue;

                }



                $tempFile = sys_get_temp_dir() . '/' . $file['name'];



                if (!$yandexClient->downloadFile($downloadUrl, $tempFile)) {

                    echo "   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞\n";

                    continue;

                }



                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç

                echo "   üìä –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ Excel —Ñ–∞–π–ª–∞...\n";

                $fileContent = file_get_contents($tempFile);

                $extractedData = $fileParser->parse($fileContent, $file['name']);



                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç

                $content = '';

                if (is_array($extractedData) && !empty($extractedData)) {

                    foreach ($extractedData as $row) {

                        if (is_array($row)) {

                            $content .= implode(' | ', array_filter($row)) . "\n";

                        } else {

                            $content .= $row . "\n";

                        }

                    }

                } else {

                    $content = is_string($extractedData) ? $extractedData : '';

                }



                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

                if (file_exists($tempFile)) {

                    unlink($tempFile);

                }



                if (empty($content)) {

                    echo "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞\n";

                    continue;

                }



                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à

                echo "   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫—ç—à...\n";

                $cacheManager->setCache($file['path'], $file['modified'] ?? '', '', $content);

            }



            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏

            $chunks = explode("\n\n", $content);

            $chunks = array_filter($chunks, function($chunk) {

                return strlen(trim($chunk)) > 50;

            });



            if (empty($chunks)) {

                $chunks = explode("\n", $content);

                $chunks = array_filter($chunks, function($chunk) {

                    return strlen(trim($chunk)) > 50;

                });

            }



            if (empty($chunks)) {

                echo "   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∞–Ω–∫–æ–≤\n";

                continue;

            }



            echo "   [DEBUG] ‚úÖ –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ " . count($chunks) . " —á–∞–Ω–∫–æ–≤...\n";



            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞–Ω–∫–∞

            foreach ($chunks as $i => $chunk) {

                echo "   [DEBUG] –ß–∞–Ω–∫ #" . ($i + 1) . ": " . substr($chunk, 0, 50) . "...\n";

            }



            // –í–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä—É–µ–º

            if ($vectorAnalyzer->vectorCacheManager->storeVectorData($file['path'], $chunks)) {

                $successfulVectorizations++;

                $totalChunks += count($chunks);

                echo "   ‚úÖ –§–∞–π–ª –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω: " . count($chunks) . " —á–∞–Ω–∫–æ–≤\n";

            } else {

                $failedVectorizations++;

                echo "   ‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n";

            }



            $processedFiles++;



            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä

            $elapsedTime = time() - $startTime;

            $eta = $elapsedTime / ($processedFiles + 1) * (count($excelFiles) - $processedFiles);

            $etaStr = gmdate("H:i:s", $eta);

            showProgressBar($processedFiles, count($excelFiles), "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (ETA: {$etaStr})", 50);



        } catch (Exception $e) {

            echo "   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: " . $e->getMessage() . "\n";

            $failedVectorizations++;

        }

    }



    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    $totalTime = time() - $startTime;

    $timeStr = gmdate("H:i:s", $totalTime);



    echo "\n\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n";

    echo "   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$timeStr}\n";

    echo "   üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {$processedFiles} –∏–∑ " . count($excelFiles) . "\n";

    echo "   ‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {$successfulVectorizations}\n";

    echo "   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {$failedVectorizations}\n";

    echo "   üìä –í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤: {$totalChunks}\n\n";



    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î

    $stats = $vectorAnalyzer->vectorCacheManager->getVectorizationStats();

    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ë–î:\n";

    echo "   - –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: " . $stats['vectorized_files_count'] . "\n\n";



} catch (Exception $e) {

    echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage() . "\n";

    echo "üìç –§–∞–π–ª: " . $e->getFile() . " —Å—Ç—Ä–æ–∫–∞ " . $e->getLine() . "\n";

    exit(1);

}

?>